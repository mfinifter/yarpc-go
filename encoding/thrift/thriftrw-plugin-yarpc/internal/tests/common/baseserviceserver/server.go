// Code generated by thriftrw-plugin-yarpc
// @generated

package baseserviceserver

import (
	context "context"
	json "encoding/json"
	wire "go.uber.org/thriftrw/wire"
	transport "go.uber.org/yarpc/api/transport"
	thrift "go.uber.org/yarpc/encoding/thrift"
	common "go.uber.org/yarpc/encoding/thrift/thriftrw-plugin-yarpc/internal/tests/common"
	yarpcerrors "go.uber.org/yarpc/yarpcerrors"
)

// Interface is the server-side interface for the BaseService service.
type Interface interface {
	Healthy(
		ctx context.Context,
	) (bool, error)
}

// New prepares an implementation of the BaseService service for
// registration.
//
// 	handler := BaseServiceHandler{}
// 	dispatcher.Register(baseserviceserver.New(handler))
func New(impl Interface, opts ...thrift.RegisterOption) []transport.Procedure {
	h := handler{impl}
	service := thrift.Service{
		Name: "BaseService",
		Methods: []thrift.Method{

			thrift.Method{
				Name: "healthy",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.Healthy),
				},
				Signature:    "Healthy() (bool)",
				ThriftModule: common.ThriftModule,
			},
		},
	}

	procedures := make([]transport.Procedure, 0, 1)
	procedures = append(procedures, thrift.BuildProcedures(service, opts...)...)
	return procedures
}

type handler struct{ impl Interface }

type errorNamer interface{ ErrorName() string }

type yarpcErrorCodeExtractor interface{ YARPCCode() *yarpcerrors.Code }

func (h handler) Healthy(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args common.BaseService_Healthy_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, yarpcerrors.InvalidArgumentErrorf(
			"could not decode Thrift request for service 'BaseService' procedure 'Healthy': %w", err)
	}

	success, appErr := h.impl.Healthy(ctx)

	hadError := appErr != nil
	result, err := common.BaseService_Healthy_Helper.WrapResponse(success, appErr)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
		if namer, ok := appErr.(errorNamer); ok {
			response.ApplicationErrorName = namer.ErrorName()
		}
		if extractor, ok := appErr.(yarpcErrorCodeExtractor); ok {
			response.ApplicationErrorCode = extractor.YARPCCode()
		}
		response.ApplicationError = appErr
	}

	return response, err
}

type stringifier struct{}

// Stringifier returns a thrift.Stringifier capable of stringifying requests
// and responses for the BaseService service.
func Stringifier() thrift.Stringifier {
	return &stringifier{}
}

// GetService gets the name of the service for which this stringifier can stringify.
func (s *stringifier) GetService() string {
	return "BaseService"
}

// StringifyRequest returns a json string representing the request.
func (s *stringifier) StringifyRequest(procedure string, requestBody wire.Value) (string, error) {
	switch procedure {

	case "Healthy":
		var args common.BaseService_Healthy_Args
		if err := args.FromWire(requestBody); err != nil {
			return "", err
		}
		b, err := json.Marshal(args)
		if err != nil {
			return "", err
		}
		return string(b), nil

	default:
		return "", yarpcerrors.InvalidArgumentErrorf(
			"could not stringify Thrift request for service 'BaseService' procedure '%s'", procedure)
	}
}

// StringifyResponse returns a json string representing the response.
func (s *stringifier) StringifyResponse(procedure string, responseBody wire.Value) (string, error) {
	switch procedure {

	case "Healthy":
		var args common.BaseService_Healthy_Result
		if err := args.FromWire(responseBody); err != nil {
			return "", err
		}
		b, err := json.Marshal(args)
		if err != nil {
			return "", err
		}
		return string(b), nil

	default:
		return "", yarpcerrors.InvalidArgumentErrorf(
			"could not stringify Thrift request for service 'BaseService' procedure '%s'", procedure)
	}
}
