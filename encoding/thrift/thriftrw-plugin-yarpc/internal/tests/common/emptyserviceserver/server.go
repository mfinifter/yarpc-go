// Code generated by thriftrw-plugin-yarpc
// @generated

package emptyserviceserver

import (
	wire "go.uber.org/thriftrw/wire"
	transport "go.uber.org/yarpc/api/transport"
	thrift "go.uber.org/yarpc/encoding/thrift"
	yarpcerrors "go.uber.org/yarpc/yarpcerrors"
)

// Interface is the server-side interface for the EmptyService service.
type Interface interface {
}

// New prepares an implementation of the EmptyService service for
// registration.
//
// 	handler := EmptyServiceHandler{}
// 	dispatcher.Register(emptyserviceserver.New(handler))
func New(impl Interface, opts ...thrift.RegisterOption) []transport.Procedure {

	service := thrift.Service{
		Name:    "EmptyService",
		Methods: []thrift.Method{},
	}

	procedures := make([]transport.Procedure, 0, 0)
	procedures = append(procedures, thrift.BuildProcedures(service, opts...)...)
	return procedures
}

type stringifier struct{}

// Stringifier returns a thrift.Stringifier capable of stringifying requests
// and responses for the EmptyService service.
func Stringifier() thrift.Stringifier {
	return &stringifier{}
}

// GetService gets the name of the service for which this stringifier can stringify.
func (s *stringifier) GetService() string {
	return "EmptyService"
}

// StringifyRequest returns a json string representing the request.
func (s *stringifier) StringifyRequest(procedure string, requestBody wire.Value) (string, error) {
	switch procedure {

	default:
		return "", yarpcerrors.InvalidArgumentErrorf(
			"could not stringify Thrift request for service 'EmptyService' procedure '%s'", procedure)
	}
}

// StringifyResponse returns a json string representing the response.
func (s *stringifier) StringifyResponse(procedure string, responseBody wire.Value) (string, error) {
	switch procedure {

	default:
		return "", yarpcerrors.InvalidArgumentErrorf(
			"could not stringify Thrift request for service 'EmptyService' procedure '%s'", procedure)
	}
}
