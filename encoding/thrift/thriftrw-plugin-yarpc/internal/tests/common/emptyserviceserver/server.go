// Code generated by thriftrw-plugin-yarpc
// @generated

package emptyserviceserver

import (
	wire "go.uber.org/thriftrw/wire"
	transport "go.uber.org/yarpc/api/transport"
	thrift "go.uber.org/yarpc/encoding/thrift"
	yarpcerrors "go.uber.org/yarpc/yarpcerrors"
)

// Interface is the server-side interface for the EmptyService service.
type Interface interface {
}

// New prepares an implementation of the EmptyService service for
// registration.
//
// 	handler := EmptyServiceHandler{}
// 	dispatcher.Register(emptyserviceserver.New(handler))
func New(impl Interface, opts ...thrift.RegisterOption) []transport.Procedure {

	service := thrift.Service{
		Name:    "EmptyService",
		Methods: []thrift.Method{},
	}

	procedures := make([]transport.Procedure, 0, 0)
	procedures = append(procedures, thrift.BuildProcedures(service, opts...)...)
	return procedures
}

type decoder struct{}

// Decoder returns a thrift.Decoder capable of decoding wire representations
// of requests and responses for the EmptyService service.
func Decoder() thrift.Decoder {
	return &decoder{}
}

// GetService gets the name of the service for which this Decoder can decode.
func (s *decoder) GetService() string {
	return "EmptyService"
}

// DecodeRequest decodes a request.
func (s *decoder) DecodeRequest(procedure string, requestBody wire.Value) (interface{}, error) {
	switch procedure {

	default:
		return nil, yarpcerrors.InvalidArgumentErrorf(
			"could not decode Thrift request for service 'EmptyService' procedure '%s': unknown procedure", procedure)
	}
}

// DecodeResponse decodes a response.
func (s *decoder) DecodeResponse(procedure string, responseBody wire.Value) (interface{}, error) {
	switch procedure {

	default:
		return nil, yarpcerrors.InvalidArgumentErrorf(
			"could not decode Thrift response for service 'EmptyService' procedure '%s': unknown procedure", procedure)
	}
}
