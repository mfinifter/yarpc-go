// Code generated by thriftrw-plugin-yarpc
// @generated

package readonlystoreserver

import (
	context "context"
	json "encoding/json"
	wire "go.uber.org/thriftrw/wire"
	transport "go.uber.org/yarpc/api/transport"
	thrift "go.uber.org/yarpc/encoding/thrift"
	atomic "go.uber.org/yarpc/encoding/thrift/thriftrw-plugin-yarpc/internal/tests/atomic"
	baseserviceserver "go.uber.org/yarpc/encoding/thrift/thriftrw-plugin-yarpc/internal/tests/common/baseserviceserver"
	yarpcerrors "go.uber.org/yarpc/yarpcerrors"
)

// Interface is the server-side interface for the ReadOnlyStore service.
type Interface interface {
	baseserviceserver.Interface

	Integer(
		ctx context.Context,
		Key *string,
	) (int64, error)
}

// New prepares an implementation of the ReadOnlyStore service for
// registration.
//
// 	handler := ReadOnlyStoreHandler{}
// 	dispatcher.Register(readonlystoreserver.New(handler))
func New(impl Interface, opts ...thrift.RegisterOption) []transport.Procedure {
	h := handler{impl}
	service := thrift.Service{
		Name: "ReadOnlyStore",
		Methods: []thrift.Method{

			thrift.Method{
				Name: "integer",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.Integer),
				},
				Signature:    "Integer(Key *string) (int64)",
				ThriftModule: atomic.ThriftModule,
			},
		},
	}

	procedures := make([]transport.Procedure, 0, 1)

	procedures = append(
		procedures,
		baseserviceserver.New(
			impl,
			append(
				opts,
				thrift.Named("ReadOnlyStore"),
			)...,
		)...,
	)
	procedures = append(procedures, thrift.BuildProcedures(service, opts...)...)
	return procedures
}

type handler struct{ impl Interface }

type errorNamer interface{ ErrorName() string }

type yarpcErrorCodeExtractor interface{ YARPCCode() *yarpcerrors.Code }

func (h handler) Integer(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args atomic.ReadOnlyStore_Integer_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, yarpcerrors.InvalidArgumentErrorf(
			"could not decode Thrift request for service 'ReadOnlyStore' procedure 'Integer': %w", err)
	}

	success, appErr := h.impl.Integer(ctx, args.Key)

	hadError := appErr != nil
	result, err := atomic.ReadOnlyStore_Integer_Helper.WrapResponse(success, appErr)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
		if namer, ok := appErr.(errorNamer); ok {
			response.ApplicationErrorName = namer.ErrorName()
		}
		if extractor, ok := appErr.(yarpcErrorCodeExtractor); ok {
			response.ApplicationErrorCode = extractor.YARPCCode()
		}
		response.ApplicationError = appErr
	}

	return response, err
}

type jsonifier struct{}

// JSONifier returns a thrift.JSONifier capable of producing JSON
// representations of requests and responses for the ReadOnlyStore service.
func JSONifier() thrift.JSONifier {
	return &jsonifier{}
}

// GetService gets the name of the service for which this JSONifier can produce
// JSON representations of requests and responses.
func (s *jsonifier) GetService() string {
	return "ReadOnlyStore"
}

// RequestToJSON returns a json representation of the request.
func (s *jsonifier) RequestToJSON(procedure string, requestBody wire.Value) ([]byte, error) {
	switch procedure {

	case "Integer":
		var args atomic.ReadOnlyStore_Integer_Args
		if err := args.FromWire(requestBody); err != nil {
			return nil, err
		}
		return json.Marshal(args)

	default:
		return nil, yarpcerrors.InvalidArgumentErrorf(
			"could not produce JSON representation of Thrift request for service 'ReadOnlyStore' procedure '%s'", procedure)
	}
}

// ResponseToJSON returns a json representation of the response.
func (s *jsonifier) ResponseToJSON(procedure string, responseBody wire.Value) ([]byte, error) {
	switch procedure {

	case "Integer":
		var result atomic.ReadOnlyStore_Integer_Result
		if err := result.FromWire(responseBody); err != nil {
			return nil, err
		}
		return json.Marshal(result)

	default:
		return nil, yarpcerrors.InvalidArgumentErrorf(
			"could not produce JSON representation of Thrift response for service 'ReadOnlyStore' procedure '%s'", procedure)
	}
}
